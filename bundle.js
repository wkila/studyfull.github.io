/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/source.js":
/*!***********************!*\
  !*** ./src/source.js ***!
  \***********************/
/***/ (() => {

eval("\r\n// rabotaet - ne trogai\r\n\r\nconst burger = document.getElementById(\"burger\"),\r\n    tabMenu = document.querySelector(\".tab-bar\"),\r\n    navContainer = document.querySelector(\"nav\"),\r\n    itemsBurger = document.querySelectorAll(\".item-burger\"),\r\n    submitBtn = document.querySelector(\".submit-btn-form\"),\r\n    body = document.querySelector(\"body\"),\r\n    contactForm = document.querySelector(\".first-form\"),\r\n    secondForm = document.querySelector(\".second-form\"),\r\n    links = document.querySelectorAll(\"li\"),\r\n    line = document.querySelector(\".line-cross\"),\r\n    containerLins = document.querySelector(\".nav-items\"),\r\n    tabBurgerMenu = document.querySelector(\".tab-burger-menu\"),\r\n    backgroundBlack = document.querySelector(\".background-black\"),\r\n    animBlocks = document.querySelectorAll(\".anim-handler\")\r\n\r\nlet currentPos = 0\r\nconst navHeight = navContainer.offsetHeight\r\nconst animClasses = {\r\n    \"left\": \"left-anim\",\r\n    \"right\": \"right-anim\",\r\n    \"top\": \"top-anim\",\r\n    \"bottom\": \"bottom-anim\",\r\n    \"height\": \"\"\r\n}\r\n\r\nline.style.width = `${links[0].getBoundingClientRect().width}px`\r\nline.style.transform = `translate(${links[0].offsetLeft - line.offsetLeft}px, 5px)`\r\n\r\ncontainerLins.addEventListener(\"click\", switcherLine)\r\ntabMenu.addEventListener(\"click\", tabClick)\r\nbody.addEventListener(\"click\", contactHandler)\r\ntabBurgerMenu.addEventListener(\"click\", linkHandler)\r\nburger.addEventListener(\"click\", burgerClick)\r\nnavContainer.addEventListener(\"click\", navHandler)\r\nwindow.addEventListener(\"scroll\", coordHandler)\r\n\r\nfunction coordHandler(event) {\r\n    currentPos = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop\r\n    document.querySelectorAll(\".link-item-header\").forEach(element => {\r\n        let href = element.getAttribute('href').substring(1)\r\n        if (href != undefined && href != null) {\r\n            let item = document.getElementById(href)\r\n            if (item != null) {\r\n                let coord = (item.getBoundingClientRect().top).toFixed(0)\r\n                console.log(item, currentPos / 4, coord)\r\n                if (currentPos / 4 > coord && !item.classList.contains(\"scrolled\") && coord < 210) {\r\n                    const activeLink = element\r\n                    const widthActive = activeLink.getBoundingClientRect().width\r\n                    \r\n                    if (item.getAttribute(\"ID\") === href) {\r\n                        item.classList.add(\"scrolled\")\r\n                        line.style.width = `${widthActive}px`\r\n\r\n                        const width = activeLink.offsetLeft - line.offsetLeft\r\n                        line.style.transform = `translate(${width}px, 5px)`\r\n                    }\r\n                }else if((coord * (-1)) < 210 && item.classList.contains(\"scrolled\")) {\r\n                    const activeLink = element\r\n                    const widthActive = activeLink.getBoundingClientRect().width\r\n                    \r\n                    if (item.getAttribute(\"ID\") === href) {\r\n                        item.classList.remove(\"scrolled\")\r\n                        line.style.width = `${widthActive}px`\r\n\r\n                        const width = activeLink.offsetLeft - line.offsetLeft\r\n                        line.style.transform = `translate(${width}px, 5px)`\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction burgerClick(event) {\r\n    let item = event.target\r\n    \r\n    if(item.classList.contains(\"burger\") || item.classList.contains(\"line-burger\") || item.classList.contains(\"burger-menu\")) {\r\n        burger.classList.toggle(\"handleActive\")\r\n        tabMenu.classList.toggle(\"handleActive\")\r\n        backgroundBlack.classList.toggle(\"handleActive\")\r\n    }\r\n}\r\n\r\nfunction linkHandler(event) {\r\n    event.preventDefault()\r\n    let item = event.target\r\n\r\n    if (item.nodeName === \"A\") {\r\n        backgroundBlack.classList.toggle(\"handleActive\")\r\n    }\r\n}\r\n\r\nfunction tabClick(event) {\r\n    event.preventDefault\r\n\r\n    const activeTab = event.target\r\n    if (activeTab.nodeName === \"A\") {\r\n        slowScroll(activeTab)\r\n        \r\n        activeTab.parentElement.classList.add(\"active\")\r\n\r\n        itemsBurger.forEach(element => {\r\n            element !== activeTab.parentElement ? element.classList.remove(\"active\") : false\r\n        })\r\n\r\n        burger.classList.toggle(\"handleActive\")\r\n        tabMenu.classList.toggle(\"handleActive\")\r\n    }\r\n}\r\nlet secondFormClick = false\r\nlet firstFormClick = false\r\n\r\nfunction contactHandler(event) {\r\n    let item = event.target\r\n\r\n    if (item.classList.contains(\"contact-btn\")) {\r\n        if (item.classList.contains(\"second-form-btn\")) {\r\n            secondForm.style.display = \"block\"\r\n            secondForm.classList.toggle(\"activeContact\")\r\n            secondFormClick = true\r\n\r\n        }else {\r\n            contactForm.style.display = \"block\"\r\n            contactForm.classList.toggle(\"activeContact\")\r\n            firstFormClick = true\r\n        }\r\n\r\n    }else if (item.classList.contains(\"contact-form\")){\r\n        console.log(\"contact form\", secondFormClick, firstFormClick)\r\n        if (firstFormClick) {\r\n            contactForm.classList.toggle(\"activeContact\")\r\n            contactForm.style.display = \"none\"\r\n            firstFormClick = false\r\n        }else if(secondFormClick) {\r\n            secondForm.classList.toggle(\"activeContact\")\r\n            secondForm.style.display = \"none\"\r\n            secondFormClick = false\r\n        }\r\n    }\r\n}\r\n\r\nfunction switcherLine(event) {\r\n    \r\n    const activeLink = event.target\r\n    const widthActive = activeLink.getBoundingClientRect().width\r\n\r\n    if (activeLink.nodeName === 'A') {\r\n        slowScroll(activeLink)\r\n        line.style.width = `${widthActive}px`\r\n\r\n        const width = activeLink.offsetLeft - line.offsetLeft\r\n        line.style.transform = `translate(${width}px, 5px)`\r\n    }\r\n}\r\n\r\nfunction navHandler(event) {\r\n    event.preventDefault()\r\n    let link = event.target\r\n\r\n    if (link.classList.contains(\"link-item\")) {\r\n        slowScroll(link)\r\n    }\r\n}\r\n\r\nfunction slowScroll(link) {\r\n    let href = link.getAttribute('href').substring(1)\r\n\r\n    const scrollTarget = document.getElementById(href)\r\n    const elementPosition = scrollTarget.getBoundingClientRect().top\r\n\r\n    if (currentPos === 0) {\r\n        currentPos = elementPosition\r\n    }else if (currentPos < elementPosition) {\r\n        currentPos = (elementPosition + currentPos)\r\n    }else if (currentPos > elementPosition) {\r\n        currentPos = (currentPos + elementPosition)\r\n    }\r\n\r\n    window.scrollTo({\r\n        top: currentPos,\r\n        behavior: 'smooth'\r\n    })\r\n}\r\n\n\n//# sourceURL=webpack://studyusa/./src/source.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/source.js"]();
/******/ 	
/******/ })()
;